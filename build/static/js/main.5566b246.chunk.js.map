{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","Menu","SubMenu","Layout","Header","Footer","Sider","Content","borrarElemento","Item","fetch","method","then","resp","json","data","console","log","window","location","reload","verElement","setState","item","name","price","Price","load","handleSubmit","e","preventDefault","obj","target","value","body","JSON","stringify","headers","res","catch","error","response","state","objs","String","this","className","onSubmit","type","id","aria-describedby","required","htmltype","loading","size","dataSource","renderItem","data-toggle","data-target","onClick","_id","class","tabindex","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5566b246.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Menu, Icon } from 'antd';\nimport { Layout } from 'antd';\nimport { List, Typography } from 'antd';\nimport { Button } from 'antd';\nimport { Alert } from 'antd';\nimport { Popover } from 'antd';\nimport './App.css';\n\n\nconst { SubMenu } = Menu;\nconst { Header, Footer, Sider, Content } = Layout;\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      objs : [],\n      load : false,\n      item: String,\n      price:String,\n    }\n  }\n\n    \n //TRAE TODOS LOS ELEMENTOS\n  componentDidMount(){\n    this.setState({\n      load:true\n    })\n    fetch(\"http://localhost:4000/cuentas\").then(resp =>resp.json()).then(data =>{\n      this.setState({\n        objs:data,\n        load:true\n      })\n    \n    })\n   \n    /*\n    fetch(\" http://www.omdbapi.com/?i=tt3896198&apikey=1f6f4390\").then(resp=>resp.json()).then(pelis=>{\n       \n        this.setState({\n          pelis:pelis\n        })\n        console.log(this.state.pelis)\n    })\n    */\n  }\n  \n   //BORRAR EL ELEMENTO\n   borrarElemento = (Item) =>{\n    const requestOptions = {\n      method: 'DELETE'\n    };\n   fetch(`http://localhost:4000/cuentas/${Item}`, requestOptions).then(resp => resp.json()).then(data =>{\n    console.log(data)\n    \n   })\n   window.location.reload();\n   \n  \n  }\n\n  //MOSTRAR EL ELEMENTO\n  verElement = (Item) => {\n    console.log(Item)\n    const requestOptions = {\n      method: 'GET'\n    };\n   fetch(`http://localhost:4000/cuentas/${Item}`, requestOptions).then(resp => resp.json()).then(data =>{\n    console.log(data)\n     \n    this.setState({\n      item:data.name,\n      price:data.Price,\n      load: true\n    })\n   })\n\n  }\n  //AGREGAR UN ELEMENTO\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    let obj = {\n      name:e.target[0].value,\n      Price:e.target[1].value\n    }\n    console.log(obj)\n    fetch(\"http://localhost:4000/add\", {\n      method: 'POST',\n      body: JSON.stringify(obj), // data can be `string` or {object}!\n      headers:{\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json())\n    .catch(error => console.error('Error:', error))\n    .then(response => {\n      window.location.reload()\n    });\n    \n\n}\n\n  render(){\n     const styles = this.state.load ? {display:'none'}:{}\n    return (\n    <div className=\"containerr\">\n       <form className=\"asdasdform\" onSubmit={this.handleSubmit}>\n      <div className=\"form-group\">\n        <input type=\"text\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" required></input>\n      </div>\n      <div className=\"form-group\">\n        <input type=\"text\" className=\"form-control\" id=\"exampleInputPassword1\" required></input>\n      </div>\n      <div className=\"form-group form-check\">\n      </div>\n      <button htmltype=\"button\"  className=\"btn btn-outline-primary btn-block\">Add user</button>\n    </form>\n\n    \n    <List id=\"lista\"\n      loading={this.load}\n      size=\"small\"\n      dataSource={this.state.objs}\n      renderItem={obj => <List.Item>{obj.name}<Button id=\"btnb2\" size=\"small\"data-toggle=\"modal\" data-target=\"#exampleModal\"  onClick={() => this.verElement(obj._id)} type=\"primary\">Show</Button><Button id=\"btnb\" size=\"small\"  onClick={() => this.borrarElemento(obj._id)} type=\"danger\">Delete</Button></List.Item>}\n    />\n\n    \n<div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n  <div class=\"modal-dialog\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h5 class=\"modal-title\" id=\"exampleModalLabel\">{this.state.item}</h5>\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n      {this.state.price}\n      </div>\n    </div>\n  </div>\n</div>\n    </div>\n     \n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}